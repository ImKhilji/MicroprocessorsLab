C51 COMPILER V9.56.0.0   ADC                                                               09/05/2017 03:30:01 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Objects\adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE adc.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\adc.l
                    -st) TABS(2) OBJECT(.\Objects\adc.obj)

line level    source

   1          /**
   2           SPI HOMEWORK2 , LABWORK2 (SAME PROGRAM)
   3           */
   4          
   5          /* @section  I N C L U D E S */
   6          #include "at89c5131.h"
   7          #include "stdio.h"
   8          #define LCD_data  P2                // LCD Data port
   9          
  10          void SPI_Init();
  11          void LCD_Init();
  12          void Timer_Init();
  13          void LCD_DataWrite(char dat);
  14          void LCD_CmdWrite(char cmd);
  15          void LCD_StringWrite(char * str, unsigned char len);
  16          void LCD_Ready();
  17          void sdelay(int delay);
  18          void delay_ms(int delay);
  19          char int_to_string(int val);
  20          
  21          sfr IE=0xA8;
  22          char temp;
  23          bit sample=0;
  24          
  25          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  26          sbit LCD_rs = P0^0;                 // LCD Register Select
  27          sbit LCD_rw = P0^1;                 // LCD Read/Write
  28          sbit LCD_en = P0^2;                 // LCD Enable
  29          sbit LCD_busy = P2^7;               // LCD Busy Flag
  30          sbit ONULL = P1^0;
  31          bit transmit_completed= 0;              // To check if spi data transmit is complete
  32          bit offset_null = 0;                // Check if offset nulling is enabled
  33          bit roundoff = 0;
  34          unsigned int adcVal=0, avgVal=0, initVal=0, adcValue = 0, tempVal = 0;
  35          unsigned char serial_data;
  36          unsigned char data_save_high;
  37          unsigned char data_save_low;
  38          unsigned char timer_count=0, i=0, samples_counter=0;
  39          // unsigned char weight[4];
  40          unsigned char voltage[4];
  41          // float fweight=0;
  42          
  43          
  44          /**
  45          
  46           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
  47           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
  48           *                   P1.4(SSbar)
  49                               P1.6(SCK)
  50           */
  51           
  52          void main(void)
  53          {
  54   1        P3 = 0X00;                      // Make Port 3 output 
C51 COMPILER V9.56.0.0   ADC                                                               09/05/2017 03:30:01 PAGE 2   

  55   1        P2 = 0x00;                      // Make Port 2 output 
  56   1        P1 &= 0xEF;                     // Make P1 Pin4-7 output
  57   1        P0 &= 0xF0;                     // Make Port 0 Pins 0,1,2 output
  58   1        
  59   1        SPI_Init();
  60   1        LCD_Init();
  61   1        Timer_Init();
  62   1        
  63   1        /* Displaying Temp on the LCD */
  64   1        LCD_CmdWrite(0x80);
  65   1        sdelay(100);
  66   1        LCD_StringWrite("Voltage: ", 9);
  67   1      
  68   1        LCD_CmdWrite(0x8D);
  69   1        sdelay(100);
  70   1        LCD_StringWrite("mV", 2);
  71   1      
  72   1        while(1)                        // endless 
  73   1        {
  74   2          
  75   2          CS_BAR = 0;                 // enable ADC as slave     
  76   2          SPDAT= 0x01;        // Write start bit to start ADC 
  77   2          while(!transmit_completed); // wait end of transmition; TILL SPIF = 1 i.e. MSB of SPSTA
  78   2          transmit_completed = 0;     // clear software transfert flag 
  79   2          
  80   2          SPDAT= 0x80;        // 80H written to start ADC CH0 single ended sampling,refer ADC datasheet
  81   2          while(!transmit_completed); // wait end of transmition 
  82   2          data_save_high = serial_data & 0x03;  
  83   2          transmit_completed = 0;     // clear software transfer flag 
  84   2              
  85   2          SPDAT= 0x00;                // 
  86   2          while(!transmit_completed); // wait end of transmition 
  87   2          data_save_low = serial_data;
  88   2          transmit_completed = 0;     // clear software transfer flag 
  89   2          CS_BAR = 1;                 // disable ADC as slave
  90   2          
  91   2          adcVal = (data_save_high <<8) + (data_save_low);  // Value at adc
  92   2      
  93   2          if(sample){
  94   3            samples_counter++;
  95   3            adcValue+=adcVal;
  96   3            if(samples_counter!=10) continue;
  97   3            else{
  98   4              samples_counter=0;
  99   4              avgVal = adcValue/2;      //Average
 100   4              sample=0;       //Stop sampling
 101   4              adcValue=0;
 102   4              voltage[0]=avgVal/1000;
 103   4              voltage[0]%=10;
 104   4              voltage[1]=avgVal/100;
 105   4              voltage[1]%=10;
 106   4              voltage[2]=avgVal/10;
 107   4              voltage[2]%=10;
 108   4              voltage[3]=avgVal;
 109   4              voltage[3]%=10;
 110   4      
 111   4              LCD_CmdWrite(0x89);
 112   4              sdelay(100);
 113   4      
 114   4              for(i=0; i<4; i++){
 115   5                temp = int_to_string(voltage[i]);
 116   5                LCD_DataWrite(temp);
C51 COMPILER V9.56.0.0   ADC                                                               09/05/2017 03:30:01 PAGE 3   

 117   5              }
 118   4            }
 119   3      
 120   3          }
 121   2      
 122   2        }
 123   1      }
 124          
 125          
 126          /**
 127           * FUNCTION_PURPOSE:interrupt
 128           * FUNCTION_INPUTS: void
 129           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
 130           */
 131          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
 132          {
 133   1        switch  ( SPSTA )         /* read and clear spi status register */
 134   1        {
 135   2          case 0x80:  
 136   2            serial_data=SPDAT;   /* read receive data */
 137   2                transmit_completed=1;/* set software flag */
 138   2          break;
 139   2      
 140   2          case 0x10:
 141   2               /* put here for mode fault tasking */  
 142   2          break;
 143   2        
 144   2          case 0x40:
 145   2               /* put here for overrun tasking */ 
 146   2          break;
 147   2        }
 148   1      }
 149          
 150          void timer0_ISR (void) interrupt 1      
 151          {
 152   1        //Initialize TH0
 153   1        //Initialize TL0
 154   1        //Increment Overflow 
 155   1        //Write averaging of 10 samples code here
 156   1      
 157   1        if(timer_count==0){             // 100ms passed
 158   2          sample=1;
 159   2          timer_count=30;
 160   2        }
 161   1        else timer_count--;
 162   1      }
 163          
 164          char int_to_string(int val){
 165   1        val += 0x30;
 166   1        return (char)val;
 167   1      }
 168          
 169          /**
 170          
 171           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
 172           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 173           *                   P1.4(SSbar)
 174                               P1.6(SCK)
 175           */ 
 176          void SPI_Init()
 177          {
 178   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
C51 COMPILER V9.56.0.0   ADC                                                               09/05/2017 03:30:01 PAGE 4   

 179   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
 180   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
 181   1        SPCON |= 0x10;                  // Master mode 
 182   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
 183   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
 184   1        IEN1 |= 0x04;                   // enable spi interrupt 
 185   1        EA=1;                           // enable interrupts 
 186   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 187   1      }
 188            /**
 189           * FUNCTION_PURPOSE:Timer Initialization
 190           * FUNCTION_INPUTS: void
 191           * FUNCTION_OUTPUTS: none
 192           */
 193          
 194          void Timer_Init()
 195          {
 196   1        // Set Timer0 to work in up counting 16 bit mode. Counts upto 
 197   1        // 65536 depending upon the calues of TH0 and TL0
 198   1        // The timer counts 65536 processor cycles. A processor cycle is 
 199   1        // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 200   1          
 201   1        TH0 = 0x00;             //Initialize TH0
 202   1        TL0 = 0x00;             //Initialize TL0
 203   1        TMOD = 0x01;            //Configure TMOD 
 204   1        IE |= 0x82;             //Set ET0
 205   1        TR0 = 1;              //Set TR0
 206   1        timer_count = 30;
 207   1      }
 208          
 209          
 210            /**
 211           * FUNCTION_PURPOSE:LCD Initialization
 212           * FUNCTION_INPUTS: void
 213           * FUNCTION_OUTPUTS: none
 214           */
 215          void LCD_Init()
 216          {
 217   1        sdelay(100);
 218   1        LCD_CmdWrite(0x38);       // LCD 2lines, 5*7 matrix
 219   1        LCD_CmdWrite(0x0E);     // Display ON cursor ON  Blinking off
 220   1        LCD_CmdWrite(0x01);     // Clear the LCD
 221   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
 222   1      }
 223          
 224          /**
 225           * FUNCTION_PURPOSE: Write Command to LCD
 226           * FUNCTION_INPUTS: cmd- command to be written
 227           * FUNCTION_OUTPUTS: none
 228           */
 229          void LCD_CmdWrite(char cmd)
 230          {
 231   1        LCD_Ready();
 232   1        LCD_data=cmd;           // Send the command to LCD
 233   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 234   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 235   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 236   1        sdelay(5);
 237   1        LCD_en=0;
 238   1        sdelay(5);
 239   1      }
 240          
C51 COMPILER V9.56.0.0   ADC                                                               09/05/2017 03:30:01 PAGE 5   

 241          /**
 242           * FUNCTION_PURPOSE: Write Command to LCD
 243           * FUNCTION_INPUTS: dat- data to be written
 244           * FUNCTION_OUTPUTS: none
 245           */
 246          void LCD_DataWrite( char dat)
 247          {
 248   1        LCD_Ready();
 249   1          LCD_data=dat;           // Send the data to LCD
 250   1          LCD_rs=1;             // Select the Data Register by pulling LCD_rs HIGH
 251   1          LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 252   1          LCD_en=1;             // Send a High-to-Low Pusle at Enable Pin
 253   1          sdelay(5);
 254   1          LCD_en=0;
 255   1        sdelay(5);
 256   1      }
 257          /**
 258           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 259           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
 260                              2. length - length of the array
 261           * FUNCTION_OUTPUTS: none
 262           */
 263          void LCD_StringWrite( char * str, unsigned char length)
 264          {
 265   1          while(length>0)
 266   1          {
 267   2              LCD_DataWrite(*str);
 268   2              str++;
 269   2              length--;
 270   2          }
 271   1      }
 272          
 273          /**
 274           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 275           * FUNCTION_INPUTS: void
 276           * FUNCTION_OUTPUTS: none
 277           */
 278          void LCD_Ready()
 279          {
 280   1        LCD_data = 0xFF;
 281   1        LCD_rs = 0;
 282   1        LCD_rw = 1;
 283   1        LCD_en = 0;
 284   1        sdelay(5);
 285   1        LCD_en = 1;
 286   1        while(LCD_busy == 1)
 287   1        {
 288   2          LCD_en = 0;
 289   2          LCD_en = 1;
 290   2        }
 291   1        LCD_en = 0;
 292   1      }
 293          
 294          /**
 295           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 296           * FUNCTION_INPUTS: void
 297           * FUNCTION_OUTPUTS: none
 298           */
 299          void sdelay(int delay)
 300          {
 301   1        char d=0;
 302   1        while(delay>0)
C51 COMPILER V9.56.0.0   ADC                                                               09/05/2017 03:30:01 PAGE 6   

 303   1        {
 304   2          for(d=0;d<5;d++);
 305   2          delay--;
 306   2        }
 307   1      }
 308          
 309          /**
 310           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 311           * FUNCTION_INPUTS: void
 312           * FUNCTION_OUTPUTS: none
 313           */
 314          void delay_ms(int delay)
 315          {
 316   1        int d=0;
 317   1        while(delay>0)
 318   1        {
 319   2          for(d=0;d<382;d++);
 320   2          delay--;
 321   2        }
 322   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    588    ----
   CONSTANT SIZE    =     13    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     21       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
