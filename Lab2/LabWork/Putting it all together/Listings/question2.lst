A51 MACRO ASSEMBLER  QUESTION2                                                            08/08/2017 02:01:26 PAGE     1


MACRO ASSEMBLER A51 V8.2.5.0
OBJECT MODULE PLACED IN .\Objects\question2.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE question2.asm SET(SMALL) DEBUG PRINT(.\Listings\question2.lst) OBJECT(.
                      \Objects\question2.obj) EP

LOC  OBJ            LINE     SOURCE

0000                   1     org 0h

0000 020100            2     ljmp main

                       3     

0003                   4     delay:

0003 7CC8              5             mov r4,#200

0005                   6         back1:

0005 7DFF              7         mov r5,#0FFH

0007                   8         back:

0007 DDFE              9             djnz r5, back

0009 DCFA             10         djnz r4, back1

000B 22               11     ret

                      12     

000C                  13     zeroOut:

000C A950             14             mov r1,50h ; N

000E A851             15             mov r0,51h ; Pointer

0010                  16             loop:

0010 7600             17                     mov @r0,#0

0012 08               18                     inc r0

0013 D9FB             19                     djnz r1, loop

0015 22               20     ret

                      21     

0016                  22     display:

0016 A850             23             mov r0,50h ; N

0018 A951             24             mov r1,51h ; Ptr

001A 7A0F             25             mov r2,#0fh ; To read the last 4 pins only

001C                  26             disploop:

001C AB4F             27                     mov r3,4fh ; 20 iterations of the delay subroutine will give us a delay of 
                             1s

001E E7               28                     mov A,@r1

001F 09               29                     inc r1

0020 5A               30                     anl A,r2

0021 C4               31                     swap A

0022 F590             32                     mov 90h,A

0024                  33                     delay1:

                      34                             ;lcall delay

0024 DBFE             35                             djnz r3, delay1

0026 D8F4             36                     djnz r0,disploop

0028 22               37     ret

                      38     

0029                  39     write_lower_nibble: ; Lower nibble in 53h and write location in r0

                      40             using 0

0029 C3               41                     clr c

002A 940A             42                     subb A,#0ah

002C 4004             43                     jc digit

002E 2C               44                             add A,r4

002F F6               45                             mov @r0,A

0030 8004             46                     sjmp comp

0032                  47                     digit:

0032 E553             48                             mov A,53h

0034 2B               49                             add A,r3

0035 F6               50                             mov @r0,A

0036 00               51                     comp: nop

0037 22               52     ret

                      53     

0038                  54     bin2ascii:

0038 AA50             55             mov r2,50h ; N

003A A951             56             mov r1,51h ; Read pointer

A51 MACRO ASSEMBLER  QUESTION2                                                            08/08/2017 02:01:26 PAGE     2

003C A852             57             mov r0,52h ; Write pointer

                      58             

003E 7B30             59             mov r3,#30h ; Offset for 0

0040 7C41             60             mov r4,#41h ; Offset for A

                      61             

0042 7DF0             62             mov r5,#0f0h ; Starts the loop by extracting the lower 4-bits

                      63             

0044                  64             loopb2a:

0044 E7               65                     mov A,@r1

0045 5D               66                     anl A,r5 ; higher nibble saved , rest all bits to 0

0046 7E04             67                     mov r6,#4

0048                  68                     rot: ; upper nibble is now in the lower half

0048 03               69                             rr A

0049 DEFD             70                     djnz r6, rot

004B F553             71                     mov 53h,A

004D 1129             72                     acall write_lower_nibble ; 53 is reserved for its argument parameter

004F 08               73                     inc r0

                      74                     

0050 ED               75                     mov A,r5

0051 F4               76                     cpl A

0052 57               77                     anl A,@r1 ; Lower order bits recovered

0053 F553             78                     mov 53h,A

0055 1129             79                     acall write_lower_nibble

0057 08               80                     inc r0

0058 09               81                     inc r1

0059 DAE9             82             djnz r2,loopb2a

005B 22               83     ret

                      84     

                      85     

005C                  86     compare: ; Compares 2 operands stored in r0 and r1

005C C3               87             clr c

005D E8               88             mov A,r0

005E 99               89             subb A,r1

005F 22               90     ret

                      91     

0060                  92     memcpy:

0060 AA50             93             mov r2,50h ; N

0062 A851             94             mov r0,51h ; Read Pointer

0064 A952             95             mov r1,52h ; Write Pointer

0066 115C             96             acall compare 

0068 4009             97             jc skip ; c is zero when Write Ptr < Read Ptr

                      98             ; Code

006A                  99             loop1:

006A E6              100                     mov A,@r0

006B F7              101                     mov @r1,A

006C 08              102                     inc r0

006D 09              103                     inc r1

006E DAFA            104                     djnz r2, loop1

0070 020083          105             ljmp completed

0073                 106             skip: ; Write Pointer > Read Pointer

                     107             ; Code

0073 EA              108                     mov A,r2

0074 29              109                     add A,r1

0075 9401            110                     subb A,#1

0077 F9              111                     mov r1,A

0078 EA              112                     mov A,r2

0079 28              113                     add A,r0

007A 9401            114                     subb A,#1

007C F8              115                     mov r0,A

007D                 116                     loop2:

007D E6              117                             mov A,@r0

007E F7              118                             mov @r1,A

007F 18              119                             dec r0

0080 19              120                             dec r1

0081 DAFA            121                             djnz r2, loop2                  

0083 00              122             completed: nop

A51 MACRO ASSEMBLER  QUESTION2                                                            08/08/2017 02:01:26 PAGE     3

0084 22              123     ret

                     124     

                     125     ;;;; Main Program

                     126     

0100                 127     ORG 100H

0100                 128     MAIN:

0100 79A7            129     mov r1,#0a7h

0102 7A08            130     mov r2,#8

                     131     

0104                 132     write:

0104 E9              133             mov A,r1

0105 F7              134             mov @r1,A

0106 09              135             inc r1

0107 DAFB            136     djnz r2, write

                     137     

0109 7581CF          138     MOV SP,#0CFH;-----------------------Initialize STACK POINTER

010C 755008          139     MOV 50H,#8;------------------------No of memory locations of Array A

010F 755180          140     MOV 51H,#80h;------------------------Array A start location

0112 12000C          141     LCALL zeroOut;----------------------Clear memory

                     142     

0115 755008          143     MOV 50H,#8;------------------------No of memory locations of Array B

0118 755188          144     MOV 51H,#88h;------------------------Array B start location

011B 12000C          145     LCALL zeroOut;----------------------Clear memory

                     146     

011E 755008          147     MOV 50H,#8;------------------------No of memory locations of source array

0121 7551A7          148     MOV 51H,#0a7h;------------------------Source array start location

0124 755280          149     MOV 52H,#80h;------------------------Destination array(A) start location

0127 120038          150     LCALL bin2ascii;--------------------Write at memory location

                     151     

012A 755010          152     MOV 50H,#16;------------------------No of elements of Array A to be copied in Array B

012D 755180          153     MOV 51H,#80h;------------------------Array A start location

0130 755288          154     MOV 52H,#88h;------------------------Array B start location

0133 120060          155     LCALL memcpy;-----------------------Copy block of memory to other location

                     156     

0136 755008          157     MOV 50H,#8;------------------------No of memory locations of Array B

0139 755188          158     MOV 51H,#88h;------------------------Array B start location

013C 754F05          159     MOV 4FH,#5;------------------------User defined delay value

013F 120016          160     LCALL display;----------------------Display the last four bits of elements on LEDs

                     161     

0142 80FE            162     here:SJMP here;---------------------WHILE loop(Infinite Loop)

                     163     END

A51 MACRO ASSEMBLER  QUESTION2                                                            08/08/2017 02:01:26 PAGE     4

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

BACK . . . . . . .  C ADDR   0007H   A   
BACK1. . . . . . .  C ADDR   0005H   A   
BIN2ASCII. . . . .  C ADDR   0038H   A   
COMP . . . . . . .  C ADDR   0036H   A   
COMPARE. . . . . .  C ADDR   005CH   A   
COMPLETED. . . . .  C ADDR   0083H   A   
DELAY. . . . . . .  C ADDR   0003H   A   
DELAY1 . . . . . .  C ADDR   0024H   A   
DIGIT. . . . . . .  C ADDR   0032H   A   
DISPLAY. . . . . .  C ADDR   0016H   A   
DISPLOOP . . . . .  C ADDR   001CH   A   
HERE . . . . . . .  C ADDR   0142H   A   
LOOP . . . . . . .  C ADDR   0010H   A   
LOOP1. . . . . . .  C ADDR   006AH   A   
LOOP2. . . . . . .  C ADDR   007DH   A   
LOOPB2A. . . . . .  C ADDR   0044H   A   
MAIN . . . . . . .  C ADDR   0100H   A   
MEMCPY . . . . . .  C ADDR   0060H   A   
ROT. . . . . . . .  C ADDR   0048H   A   
SKIP . . . . . . .  C ADDR   0073H   A   
SP . . . . . . . .  D ADDR   0081H   A   
WRITE. . . . . . .  C ADDR   0104H   A   
WRITE_LOWER_NIBBLE  C ADDR   0029H   A   
ZEROOUT. . . . . .  C ADDR   000CH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
