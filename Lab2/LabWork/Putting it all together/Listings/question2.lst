A51 MACRO ASSEMBLER  QUESTION2                                                            08/07/2017 05:40:23 PAGE     1


MACRO ASSEMBLER A51 V8.2.5.0
OBJECT MODULE PLACED IN .\Objects\question2.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE question2.asm SET(SMALL) DEBUG PRINT(.\Listings\question2.lst) OBJECT(.
                      \Objects\question2.obj) EP

LOC  OBJ            LINE     SOURCE

0000                   1     org 0h

0000 020100            2     ljmp main

                       3     

0003                   4     delay:

0003 7CC8              5             mov r4,#200

0005                   6         back1:

0005 7DFF              7         mov r5,#0FFH

0007                   8         back:

0007 DDFE              9             djnz r5, back

0009 DCFA             10         djnz r4, back1

000B 22               11     ret

                      12     

000C                  13     zeroOut:

000C A950             14             mov r1,50h ; N

000E A851             15             mov r0,51h ; Pointer

0010                  16             loop:

0010 7600             17                     mov @r0,#0

0012 08               18                     inc r0

0013 D9FB             19                     djnz r1, loop

0015 22               20     ret

                      21     

0016                  22     display:

0016 A850             23             mov r0,50h ; N

0018 A951             24             mov r1,51h ; Ptr

001A 7A0F             25             mov r2,#0fh ; To read the last 4 pins only

001C                  26             disploop:

001C AB4F             27                     mov r3,4fh ; 20 iterations of the delay subroutine will give us a delay of 
                             1s

001E E7               28                     mov A,@r1

001F 09               29                     inc r1

0020 5A               30                     anl A,r2

0021 F590             31                     mov 90h,A

0023                  32                     delay1:

                      33                             ;lcall delay

0023 DBFE             34                             djnz r3, delay1

0025 D8F5             35                     djnz r0,disploop

0027 22               36     ret

                      37     

0028                  38     write_lower_nibble: ; Lower nibble in 53h and write location in r0

                      39             using 0

0028 C3               40                     clr c

0029 940A             41                     subb A,#0ah

002B 4004             42                     jc digit

002D 2C               43                             add A,r4

002E F6               44                             mov @r0,A

002F 8004             45                     sjmp comp

0031                  46                     digit:

0031 E553             47                             mov A,53h

0033 2B               48                             add A,r3

0034 F6               49                             mov @r0,A

0035 00               50                     comp: nop

0036 22               51     ret

                      52     

0037                  53     bin2ascii:

0037 AA50             54             mov r2,50h ; N

0039 A951             55             mov r1,51h ; Read pointer

003B A852             56             mov r0,52h ; Write pointer

A51 MACRO ASSEMBLER  QUESTION2                                                            08/07/2017 05:40:23 PAGE     2

                      57             

003D 7B30             58             mov r3,#30h ; Offset for 0

003F 7C61             59             mov r4,#61h ; Offset for a

                      60             

0041 7DF0             61             mov r5,#0f0h ; Starts the loop by extracting the lower 4-bits

                      62             

0043                  63             loopb2a:

0043 E7               64                     mov A,@r1

0044 5D               65                     anl A,r5 ; higher nibble saved , rest all bits to 0

0045 7E04             66                     mov r6,#4

0047                  67                     rot: ; upper nibble is now in the lower half

0047 03               68                             rr A

0048 DEFD             69                     djnz r6, rot

004A F553             70                     mov 53h,A

004C 1128             71                     acall write_lower_nibble ; 53 is reserved for its argument parameter

004E 08               72                     inc r0

                      73                     

004F ED               74                     mov A,r5

0050 F4               75                     cpl A

0051 57               76                     anl A,@r1 ; Lower order bits recovered

0052 F553             77                     mov 53h,A

0054 1128             78                     acall write_lower_nibble

0056 08               79                     inc r0

0057 09               80                     inc r1

0058 DAE9             81             djnz r2,loopb2a

005A 22               82     ret

                      83     

                      84     

005B                  85     compare: ; Compares 2 operands stored in r0 and r1

005B C3               86             clr c

005C E8               87             mov A,r0

005D 99               88             subb A,r1

005E 22               89     ret

                      90     

005F                  91     memcpy:

005F AA50             92             mov r2,50h ; N

0061 A851             93             mov r0,51h ; Read Pointer

0063 A952             94             mov r1,52h ; Write Pointer

0065 115B             95             acall compare 

0067 4009             96             jc skip ; c is zero when Write Ptr < Read Ptr

                      97             ; Code

0069                  98             loop1:

0069 E6               99                     mov A,@r0

006A F7              100                     mov @r1,A

006B 08              101                     inc r0

006C 09              102                     inc r1

006D DAFA            103                     djnz r2, loop1

006F 020082          104             ljmp completed

0072                 105             skip: ; Write Pointer > Read Pointer

                     106             ; Code

0072 EA              107                     mov A,r2

0073 29              108                     add A,r1

0074 9401            109                     subb A,#1

0076 F9              110                     mov r1,A

0077 EA              111                     mov A,r2

0078 28              112                     add A,r0

0079 9401            113                     subb A,#1

007B F8              114                     mov r0,A

007C                 115                     loop2:

007C E6              116                             mov A,@r0

007D F7              117                             mov @r1,A

007E 18              118                             dec r0

007F 19              119                             dec r1

0080 DAFA            120                             djnz r2, loop2                  

0082 00              121             completed: nop

0083 22              122     ret

A51 MACRO ASSEMBLER  QUESTION2                                                            08/07/2017 05:40:23 PAGE     3

                     123     

                     124     ;;;; Main Program

                     125     

0100                 126     ORG 100H

0100                 127     MAIN:

0100 79AC            128     mov r1,#0ach

0102 7A08            129     mov r2,#8

                     130     

0104                 131     write:

0104 E9              132             mov A,r1

0105 F7              133             mov @r1,A

0106 09              134             inc r1

0107 DAFB            135     djnz r2, write

                     136     

0109 7581CF          137     MOV SP,#0CFH;-----------------------Initialize STACK POINTER

010C 755008          138     MOV 50H,#8;------------------------No of memory locations of Array A

010F 755180          139     MOV 51H,#80h;------------------------Array A start location

0112 12000C          140     LCALL zeroOut;----------------------Clear memory

                     141     

0115 755008          142     MOV 50H,#8;------------------------No of memory locations of Array B

0118 755188          143     MOV 51H,#88h;------------------------Array B start location

011B 12000C          144     LCALL zeroOut;----------------------Clear memory

                     145     

011E 755008          146     MOV 50H,#8;------------------------No of memory locations of source array

0121 7551AC          147     MOV 51H,#0ach;------------------------Source array start location

0124 755280          148     MOV 52H,#80h;------------------------Destination array(A) start location

0127 120037          149     LCALL bin2ascii;--------------------Write at memory location

                     150     

012A 755010          151     MOV 50H,#16;------------------------No of elements of Array A to be copied in Array B

012D 755180          152     MOV 51H,#80h;------------------------Array A start location

0130 755288          153     MOV 52H,#88h;------------------------Array B start location

0133 12005F          154     LCALL memcpy;-----------------------Copy block of memory to other location

                     155     

0136 755008          156     MOV 50H,#8;------------------------No of memory locations of Array B

0139 755188          157     MOV 51H,#88h;------------------------Array B start location

013C 754F05          158     MOV 4FH,#5;------------------------User defined delay value

013F 120016          159     LCALL display;----------------------Display the last four bits of elements on LEDs

                     160     

0142 80FE            161     here:SJMP here;---------------------WHILE loop(Infinite Loop)

                     162     END

A51 MACRO ASSEMBLER  QUESTION2                                                            08/07/2017 05:40:23 PAGE     4

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

BACK . . . . . . .  C ADDR   0007H   A   
BACK1. . . . . . .  C ADDR   0005H   A   
BIN2ASCII. . . . .  C ADDR   0037H   A   
COMP . . . . . . .  C ADDR   0035H   A   
COMPARE. . . . . .  C ADDR   005BH   A   
COMPLETED. . . . .  C ADDR   0082H   A   
DELAY. . . . . . .  C ADDR   0003H   A   
DELAY1 . . . . . .  C ADDR   0023H   A   
DIGIT. . . . . . .  C ADDR   0031H   A   
DISPLAY. . . . . .  C ADDR   0016H   A   
DISPLOOP . . . . .  C ADDR   001CH   A   
HERE . . . . . . .  C ADDR   0142H   A   
LOOP . . . . . . .  C ADDR   0010H   A   
LOOP1. . . . . . .  C ADDR   0069H   A   
LOOP2. . . . . . .  C ADDR   007CH   A   
LOOPB2A. . . . . .  C ADDR   0043H   A   
MAIN . . . . . . .  C ADDR   0100H   A   
MEMCPY . . . . . .  C ADDR   005FH   A   
ROT. . . . . . . .  C ADDR   0047H   A   
SKIP . . . . . . .  C ADDR   0072H   A   
SP . . . . . . . .  D ADDR   0081H   A   
WRITE. . . . . . .  C ADDR   0104H   A   
WRITE_LOWER_NIBBLE  C ADDR   0028H   A   
ZEROOUT. . . . . .  C ADDR   000CH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
