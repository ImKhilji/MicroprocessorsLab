C51 COMPILER V9.56.0.0   MINI_PROJECT                                                      10/03/2017 02:11:17 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MINI_PROJECT
OBJECT MODULE PLACED IN .\Objects\mini_project.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE mini_project.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\mini_project.lst) TABS(2) OBJECT(.\Objects\mini_project.obj)

line level    source

   1          /**
   2           SPI HOMEWORK2, LABWORK2 (SAME PROGRAM)
   3           */
   4          
   5          /* @section  INCLUDES */
   6          #include "at89c5131.h"
   7          #include "stdio.h"
   8          #define LCD_data  P2                // LCD Data port
   9          
  10          void SPI_Init();
  11          void LCD_Init();
  12          // void Timer_Init();
  13          void LCD_DataWrite(char dat);
  14          void LCD_CmdWrite(char cmd);
  15          void LCD_StringWrite(char * str, unsigned char len);
  16          void LCD_Ready();
  17          void sdelay(int delay);
  18          void delay_ms(int delay);
  19          char int_to_string(int val);
  20          void init_control();
  21          int set();
  22          void run();
  23          void split_into_characters(int number, char num_of_char, unsigned char* array);
  24          
  25          sfr IE=0xA8;
  26          char temp;
  27          
  28          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  29          sbit LCD_rs = P0^0;                 // LCD Register Select
  30          sbit LCD_rw = P0^1;                 // LCD Read/Write
  31          sbit LCD_en = P0^2;                 // LCD Enable
  32          sbit LCD_busy = P2^7;               // LCD Busy Flag
  33          sbit ONULL = P1^0;
  34          bit transmit_completed= 0;              // To check if spi data transmit is complete
  35          bit offset_null = 0;                // Check if offset nulling is enabled
  36          bit roundoff = 0;
  37          unsigned int adcVal=0, avgVal=0, initVal=0, adcValue = 0, timerVal=0;
  38          unsigned char serial_data;
  39          unsigned char data_save_high;
  40          unsigned char data_save_low;
  41          unsigned char i=0, samples_counter=0; //, timer_count=30;
  42          unsigned char temperature[3],time[3];
  43          
  44          unsigned int CT, del_T=50;
  45          unsigned int DT=35;
  46          bit start_timer=0;
  47          sbit PIN = P1^0;    // This is to check the mode of the Temperature Controller
  48          sbit RELAY = P3^7;    // This pins drives the delay
  49          sbit LED = P3^6;    // just an LED
  50          
  51          /**
  52          
  53           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
  54           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
C51 COMPILER V9.56.0.0   MINI_PROJECT                                                      10/03/2017 02:11:17 PAGE 2   

  55           *                   P1.4(SSbar)
  56                               P1.6(SCK)
  57           */
  58          void main(void)
  59          {
  60   1        P3 = 0X00;                      // Make Port 3 output 
  61   1        P2 = 0x00;                      // Make Port 2 output 
  62   1        P1 &= 0xEF;                     // Make P1 Pin4-7 output
  63   1        P0 &= 0xF0;                     // Make Port 0 Pins 0,1,2 output
  64   1        
  65   1        SPI_Init();
  66   1        LCD_Init();
  67   1        // Timer_Init();
  68   1        
  69   1        /* First Line */
  70   1        LCD_CmdWrite(0x81);
  71   1        sdelay(100);
  72   1        LCD_StringWrite("DT", 2);
  73   1      
  74   1        LCD_CmdWrite(0x87);
  75   1        sdelay(100);
  76   1        LCD_StringWrite("CT", 2);
  77   1      
  78   1        LCD_CmdWrite(0x8C);
  79   1        sdelay(100);
  80   1        LCD_StringWrite("Time", 4);
  81   1      
  82   1        /* Control Signals Initialisation */
  83   1        init_control();
  84   1      
  85   1        LED=1;          // Is always kept in set mode
  86   1      
  87   1        while(1){
  88   2          
  89   2          if(PIN==1){  /* PIN is in mode SET */
  90   3            DT=set();
  91   3            start_timer=1;  /* To start the timer on toggle */
  92   3            
  93   3            /* Time is set to zero */
  94   3            timerVal=0;     // Initial time value
  95   3            split_into_characters(timerVal, 3, time);
  96   3      
  97   3            /* displaying time */ 
  98   3            LCD_CmdWrite(0xCC);
  99   3            sdelay(100);
 100   3      
 101   3            for(i=0; i<3; i++){
 102   4              temp = int_to_string(time[i]);
 103   4              LCD_DataWrite(temp);
 104   4            }
 105   3      
 106   3            /* Delay in Sampling */
 107   3            delay_ms(500);
 108   3          }
 109   2          else{ /* PIN is in mode RUN */
 110   3            // if(start_timer==1){
 111   3            //  TR0=1;  // Start timer for the first time mode is toggled from set to run
 112   3            // }
 113   3            run();
 114   3            delay_ms(1000);
 115   3          }
 116   2        }
C51 COMPILER V9.56.0.0   MINI_PROJECT                                                      10/03/2017 02:11:17 PAGE 3   

 117   1      }
 118          
 119          int set(){  /* Reads ADC value from channel 0 */
 120   1        while(1){
 121   2      
 122   2          CS_BAR = 0;                 // enable ADC as slave     
 123   2          SPDAT= 0x01;        // Write start bit to start ADC 
 124   2          while(!transmit_completed); // wait end of transmition; TILL SPIF = 1 i.e. MSB of SPSTA
 125   2          transmit_completed = 0;     // clear software transfert flag 
 126   2          
 127   2          SPDAT= 0x80;        // 80H written to start ADC CH0 single ended sampling,refer ADC datasheet
 128   2          while(!transmit_completed); // wait end of transmition 
 129   2          data_save_high = serial_data & 0x03;  
 130   2          transmit_completed = 0;     // clear software transfer flag 
 131   2              
 132   2          SPDAT= 0x00;                // 
 133   2          while(!transmit_completed); // wait end of transmition 
 134   2          data_save_low = serial_data;
 135   2          transmit_completed = 0;     // clear software transfer flag 
 136   2          CS_BAR = 1;                 // disable ADC as slave
 137   2          
 138   2          adcVal = (data_save_high <<8) + (data_save_low);  // Value at adc
 139   2      
 140   2          /* Starts Sampling */
 141   2          samples_counter++;
 142   2          adcValue+=adcVal;
 143   2          if(samples_counter!=10) continue;
 144   2          else{
 145   3            samples_counter=0;
 146   3            avgVal = adcValue/200;      //Average
 147   3            adcValue=0;
 148   3            if(avgVal < 5){
 149   4              avgVal = 0;
 150   4            }
 151   3            else if(5<avgVal && avgVal<15){
 152   4              avgVal = 20;
 153   4            }
 154   3            else if(15<avgVal && avgVal<25){
 155   4              avgVal = 20;
 156   4            }
 157   3            else if(25<avgVal && avgVal<35){
 158   4              avgVal = 30;
 159   4            }
 160   3            else if(35<avgVal && avgVal<45){
 161   4              avgVal = 40;
 162   4            }
 163   3            else{
 164   4              avgVal = 50;
 165   4            }
 166   3            avgVal+=35; // Final Temperature Value
 167   3      
 168   3      
 169   3            /* Splits the value into character array for Tx */
 170   3            split_into_characters(avgVal, 3, &temperature);
 171   3      
 172   3            /* Writes on the second line below DT */
 173   3            LCD_CmdWrite(0xC0);
 174   3            sdelay(100);
 175   3      
 176   3            for(i=0; i<3; i++){
 177   4              temp = int_to_string(temperature[i]);
 178   4              LCD_DataWrite(temp);
C51 COMPILER V9.56.0.0   MINI_PROJECT                                                      10/03/2017 02:11:17 PAGE 4   

 179   4            }
 180   3          }
 181   2      
 182   2          PIN=1;        // Ensure that PIN is set as an input pin
 183   2          return avgVal;
 184   2        }     
 185   1      }
 186          
 187          void run(){ /* Reads from Channel 1 */
 188   1      
 189   1        while(1){
 190   2      
 191   2          CS_BAR = 0;                 // enable ADC as slave     
 192   2          SPDAT= 0x01;        // Write start bit to start ADC 
 193   2          while(!transmit_completed); // wait end of transmition; TILL SPIF = 1 i.e. MSB of SPSTA
 194   2          transmit_completed = 0;     // clear software transfert flag 
 195   2          
 196   2          SPDAT= 0x90;        // 80H written to start ADC CH0 single ended sampling,refer ADC datasheet
 197   2          while(!transmit_completed); // wait end of transmition 
 198   2          data_save_high = serial_data & 0x03;  
 199   2          transmit_completed = 0;     // clear software transfer flag 
 200   2              
 201   2          SPDAT= 0x00;                // 
 202   2          while(!transmit_completed); // wait end of transmition 
 203   2          data_save_low = serial_data;
 204   2          transmit_completed = 0;     // clear software transfer flag 
 205   2          CS_BAR = 1;                 // disable ADC as slave
 206   2          
 207   2          adcVal = (data_save_high <<8) + (data_save_low);  // Value at adc
 208   2      
 209   2          /* Starts Sampling */
 210   2          samples_counter++;
 211   2          adcValue+=adcVal;
 212   2          if(samples_counter!=10) continue;
 213   2          else{
 214   3            samples_counter=0;
 215   3            avgVal = adcValue/20;     //Average
 216   3            adcValue=0;
 217   3      
 218   3            split_into_characters(avgVal, 3, temperature);
 219   3      
 220   3            /* Writes on the second line below DT */
 221   3            LCD_CmdWrite(0xC6);
 222   3            sdelay(100);
 223   3      
 224   3            /* Displays the current Tempearture */
 225   3            for(i=0; i<3; i++){
 226   4              temp = int_to_string(temperature[i]);
 227   4              LCD_DataWrite(temp);
 228   4            }
 229   3          }
 230   2      
 231   2          // if( TR0 && (DT<avgVal) ){  /* Temperature reaches the DT */
 232   2            // TR0=0;     /* 
 233   2            // start_timer=0; /* Won't allow the timer to run henceforth */
 234   2          // }
 235   2          if( DT > avgVal ){  /* Till the temperature reaches DT */
 236   3            timerVal++;
 237   3            split_into_characters(timerVal, 3, time);
 238   3      
 239   3            LCD_CmdWrite(0xCC);
 240   3            sdelay(100);
C51 COMPILER V9.56.0.0   MINI_PROJECT                                                      10/03/2017 02:11:17 PAGE 5   

 241   3      
 242   3            /* Updates the time */
 243   3            for(i=0; i<3; i++){
 244   4              temp = int_to_string(time[i]);
 245   4              LCD_DataWrite(temp);
 246   4            }
 247   3          }
 248   2      
 249   2          CT=avgVal;
 250   2      
 251   2          /* Regulate Temperature */
 252   2          if( (DT+del_T) < CT ){
 253   3            RELAY=0;
 254   3          }
 255   2          else if( (DT-del_T) > CT ){
 256   3            RELAY=1;
 257   3          }
 258   2      
 259   2          PIN=1;        // Ensure that PIN is set as an input pin
 260   2          break;
 261   2        }
 262   1      }
 263          
 264          void split_into_characters(unsigned int number, char num_of_char, unsigned char* array){
*** WARNING C235 IN LINE 264 OF mini_project.c: parameter 1: different types
 265   1        for ( i=num_of_char-1; i>=0; i--)
 266   1        {
 267   2          /* code */
 268   2          array[i]=number%10;
 269   2          number/=10;
 270   2        }
 271   1      }
 272          
 273          void init_control(){
 274   1        /* Switching off the power supply */
 275   1        RELAY=0;
 276   1      
 277   1        /* Setting P1^0 as input */
 278   1        PIN=1;
 279   1      }
 280          
 281          // void Timer_Init()
 282          // {
 283          //  // Set Timer0 to work in up counting 16 bit mode. Counts upto 
 284          //  // 65536 depending upon the calues of TH0 and TL0
 285          //  // The timer counts 65536 processor cycles. A processor cycle is 
 286          //  // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 287              
 288          //  TH0 = 0x00;             //Initialize TH0
 289          //  TL0 = 0x00;             //Initialize TL0
 290          //  TMOD = 0x01;            //Configure TMOD 
 291          //  // IE |= 0x82;            //Set ET0
 292          //  TR0 = 0;              //Set TR0
 293          //  // timer_count = 30;
 294          // }
 295          
 296          // void timer0_ISR (void) interrupt 1     
 297          // {
 298          //  //Initialize TH0
 299          //  //Initialize TL0
 300          //  //Increment Overflow 
 301          //  //Write averaging of 10 samples code here
C51 COMPILER V9.56.0.0   MINI_PROJECT                                                      10/03/2017 02:11:17 PAGE 6   

 302          
 303            // if(timer_count==0){              // 100ms passed
 304            //  // One second completed
 305            //  timerVal++;
 306            //  split_into_characters(timerVal, 3, time);
 307            //  timerVal=0;
 308          
 309            //  LCD_CmdWrite(0xCC);
 310            //  sdelay(100);
 311          
 312            //  /* Updates the time */
 313            //  for(i=0; i<3; i++){
 314            //    temp = int_to_string(time[i]);
 315            //    LCD_DataWrite(temp);
 316            //  }
 317          
 318          //    timer_count=30;
 319          //  }
 320          //  else timer_count--;
 321          // }
 322          
 323          /**
 324           * FUNCTION_PURPOSE:interrupt
 325           * FUNCTION_INPUTS: void
 326           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
 327           */
 328          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
 329          {
 330   1        switch  ( SPSTA )         /* read and clear spi status register */
 331   1        {
 332   2          case 0x80:  
 333   2            serial_data=SPDAT;   /* read receive data */
 334   2                transmit_completed=1;/* set software flag */
 335   2          break;
 336   2      
 337   2          case 0x10:
 338   2               /* put here for mode fault tasking */  
 339   2          break;
 340   2        
 341   2          case 0x40:
 342   2               /* put here for overrun tasking */ 
 343   2          break;
 344   2        }
 345   1      }
 346          
 347          char int_to_string(int val){
 348   1        val += 0x30;
 349   1        return (char)val;
 350   1      }
 351          
 352          /**
 353          
 354           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
 355           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 356           *                   P1.4(SSbar)
 357                               P1.6(SCK)
 358           */ 
 359          void SPI_Init()
 360          {
 361   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
 362   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
 363   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
C51 COMPILER V9.56.0.0   MINI_PROJECT                                                      10/03/2017 02:11:17 PAGE 7   

 364   1        SPCON |= 0x10;                  // Master mode 
 365   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
 366   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
 367   1        IEN1 |= 0x04;                   // enable spi interrupt 
 368   1        EA=1;                           // enable interrupts 
 369   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 370   1      }
 371          
 372          
 373          
 374          /**
 375           * FUNCTION_PURPOSE:LCD Initialization
 376           * FUNCTION_INPUTS: void
 377           * FUNCTION_OUTPUTS: none
 378           */
 379          void LCD_Init()
 380          {
 381   1        sdelay(100);
 382   1        LCD_CmdWrite(0x38);       // LCD 2lines, 5*7 matrix
 383   1        LCD_CmdWrite(0x0C);     // Display ON cursor ON  Blinking off
 384   1        LCD_CmdWrite(0x01);     // Clear the LCD
 385   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
 386   1      }
 387          
 388          /**
 389           * FUNCTION_PURPOSE: Write Command to LCD
 390           * FUNCTION_INPUTS: cmd- command to be written
 391           * FUNCTION_OUTPUTS: none
 392           */
 393          void LCD_CmdWrite(char cmd)
 394          {
 395   1        LCD_Ready();
 396   1        LCD_data=cmd;           // Send the command to LCD
 397   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 398   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 399   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 400   1        sdelay(5);
 401   1        LCD_en=0;
 402   1        sdelay(5);
 403   1      }
 404          
 405          /**
 406           * FUNCTION_PURPOSE: Write Command to LCD
 407           * FUNCTION_INPUTS: dat- data to be written
 408           * FUNCTION_OUTPUTS: none
 409           */
 410          void LCD_DataWrite( char dat)
 411          {
 412   1        LCD_Ready();
 413   1          LCD_data=dat;           // Send the data to LCD
 414   1          LCD_rs=1;             // Select the Data Register by pulling LCD_rs HIGH
 415   1          LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 416   1          LCD_en=1;             // Send a High-to-Low Pusle at Enable Pin
 417   1          sdelay(5);
 418   1          LCD_en=0;
 419   1        sdelay(5);
 420   1      }
 421          
 422          /**
 423           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 424           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
 425                              2. length - length of the array
C51 COMPILER V9.56.0.0   MINI_PROJECT                                                      10/03/2017 02:11:17 PAGE 8   

 426           * FUNCTION_OUTPUTS: none
 427           */
 428          void LCD_StringWrite( char * str, unsigned char length)
 429          {
 430   1          while(length>0)
 431   1          {
 432   2              LCD_DataWrite(*str);
 433   2              str++;
 434   2              length--;
 435   2          }
 436   1      }
 437          
 438          /**
 439           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 440           * FUNCTION_INPUTS: void
 441           * FUNCTION_OUTPUTS: none
 442           */
 443          void LCD_Ready()
 444          {
 445   1        LCD_data = 0xFF;
 446   1        LCD_rs = 0;
 447   1        LCD_rw = 1;
 448   1        LCD_en = 0;
 449   1        sdelay(5);
 450   1        LCD_en = 1;
 451   1        while(LCD_busy == 1)
 452   1        {
 453   2          LCD_en = 0;
 454   2          LCD_en = 1;
 455   2        }
 456   1        LCD_en = 0;
 457   1      }
 458          
 459          /**
 460           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 461           * FUNCTION_INPUTS: void
 462           * FUNCTION_OUTPUTS: none
 463           */
 464          void sdelay(int delay)
 465          {
 466   1        char d=0;
 467   1        while(delay>0)
 468   1        {
 469   2          for(d=0;d<5;d++);
 470   2          delay--;
 471   2        }
 472   1      }
 473          
 474          /**
 475           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 476           * FUNCTION_INPUTS: void
 477           * FUNCTION_OUTPUTS: none
 478           */
 479          void delay_ms(int delay)
 480          {
 481   1        int d=0;
 482   1        while(delay>0)
 483   1        {
 484   2          for(d=0;d<382;d++);
 485   2          delay--;
 486   2        }
 487   1      }
C51 COMPILER V9.56.0.0   MINI_PROJECT                                                      10/03/2017 02:11:17 PAGE 9   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1052    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     28      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
