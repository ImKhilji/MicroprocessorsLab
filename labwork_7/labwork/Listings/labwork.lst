C51 COMPILER V9.56.0.0   LABWORK                                                           09/19/2017 03:31:29 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE LABWORK
OBJECT MODULE PLACED IN .\Objects\labwork.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE labwork.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\l
                    -abwork.lst) TABS(2) OBJECT(.\Objects\labwork.obj)

line level    source

   1          #include "at89c5131.h"
   2          #include "stdio.h"
   3          
   4          /* Functions Declaration */
   5          void ISR_serial(void);
   6          void init_serial();
   7          char receive_data(void);
   8          void transmit_data(unsigned char str);
   9          void transmit_string(char* str, int n);
  10          void delay_ms(int delay);
  11          
  12          
  13          void SPI_Init();
  14          char int_to_string(int val);
  15          
  16          sfr IE=0xA8;
  17          sbit parity_bit = PSW^0;
  18          
  19          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  20          sbit ONULL = P1^0;
  21          bit transmit_completed= 0;              // To check if spi data transmit is complete
  22          bit offset_null = 0;                // Check if offset nulling is enabled
  23          bit roundoff = 0;
  24          unsigned int adcVal=0, avgVal=0, initVal=0, adcValue = 0, tempVal = 0;
  25          unsigned char serial_data;
  26          unsigned char data_save_high;
  27          unsigned char data_save_low;
  28          unsigned char i=0, samples_counter=0;
  29          unsigned char voltage[3];
  30          
  31          char* string1 = "Press Y to start sampling the data\n";
  32          char* string2 = "To stop sampling press N\n";
  33          char* string3 = "Temperature: ";
  34          char received_data;
  35          
  36          //=========================================================
  37                  /* Main Function */
  38          //=========================================================
  39          /**
  40          
  41           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
  42           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
  43           *                   P1.4(SSbar)
  44                               P1.6(SCK)
  45           */
  46          
  47          void main(){  
  48   1        
  49   1        SPI_Init();
  50   1        init_serial();
  51   1        
  52   1        while(1){
  53   2          transmit_string(string1, 35);         // "Press Y to start ....."
  54   2          received_data = receive_data();
C51 COMPILER V9.56.0.0   LABWORK                                                           09/19/2017 03:31:29 PAGE 2   

  55   2          
  56   2          if(received_data == 'Y') break;
  57   2        }
  58   1        
  59   1      
  60   1        while(1) 
  61   1        {
  62   2      
  63   2          CS_BAR = 0;                 // enable ADC as slave     
  64   2          SPDAT= 0x01;        // Write start bit to start ADC 
  65   2          while(!transmit_completed); // wait end of transmition; TILL SPIF = 1 i.e. MSB of SPSTA
  66   2          transmit_completed = 0;     // clear software transfert flag 
  67   2          
  68   2          SPDAT= 0x80;        // 80H written to start ADC CH0 single ended sampling,refer ADC datasheet
  69   2          while(!transmit_completed); // wait end of transmition 
  70   2          data_save_high = serial_data & 0x03;  
  71   2          transmit_completed = 0;     // clear software transfer flag 
  72   2              
  73   2          SPDAT= 0x00;                // 
  74   2          while(!transmit_completed); // wait end of transmition 
  75   2          data_save_low = serial_data;
  76   2          transmit_completed = 0;     // clear software transfer flag 
  77   2          CS_BAR = 1;                 // disable ADC as slave
  78   2          
  79   2          adcVal = (data_save_high <<8) + (data_save_low);  // Value at adc
  80   2      
  81   2        
  82   2          samples_counter++;
  83   2          adcValue+=adcVal;
  84   2          if(samples_counter!=10) continue;
  85   2          else{
  86   3            samples_counter=0;
  87   3            avgVal = adcValue/20;     //Average
  88   3            adcValue=0;
  89   3            voltage[0]=avgVal/100;
  90   3            voltage[0]%=10;
  91   3            voltage[1]=avgVal/10;
  92   3            voltage[1]%=10;
  93   3            voltage[2]=avgVal;
  94   3            voltage[2]%=10;
  95   3          }
  96   2      
  97   2          transmit_string(string3, 14);
  98   2          for(i=0; i<3; i++){
  99   3            transmit_data(int_to_string(voltage[i]));
 100   3          }
 101   2          transmit_data('\n');
 102   2      
 103   2          transmit_string(string2, 25);
 104   2      
 105   2          received_data = receive_data();
 106   2          if(received_data == 'N') break;
 107   2        }
 108   1      
 109   1        while(1);                 // Wait forever
 110   1      }
 111          
 112          
 113          void init_serial()
 114          {
 115   1        //Initialize serial communication and interrupts
 116   1        TMOD = 0x20;            // Timer1 in mode 2
C51 COMPILER V9.56.0.0   LABWORK                                                           09/19/2017 03:31:29 PAGE 3   

 117   1        SCON = 0xD0;            // Serial in mode 3
 118   1        TH1 = -52;              // To ensure 1200 baud rate
 119   1        TR1 = 1;              // Initiate the timer
 120   1        TI = 0;
 121   1        RI = 0;
 122   1      }
 123          
 124          
 125          char receive_data(void)
 126          {
 127   1        //function to receive data over RxD pin.
 128   1        char rec_data;
 129   1        unsigned int d=0;
 130   1        
 131   1        delay_ms(2000);
 132   1        if(RI==1){
 133   2          rec_data = SBUF;
 134   2          RI=0;
 135   2          return rec_data;
 136   2        }
 137   1      
 138   1        return 'A';             // Arbitrarily setting the return value to 'A'
 139   1      
 140   1      }
 141          
 142          
 143          void transmit_data(unsigned char str)
 144          {
 145   1        //function to transmit data over TxD pin.
 146   1        TI=0;
 147   1        ACC = str;
 148   1        TB8 = parity_bit;
 149   1        SBUF = ACC;
 150   1        while(TI==0);           // Wait till data gets trnasmitted fully
 151   1        TI=0;
 152   1      }
 153          
 154          
 155          void transmit_string(char* str, int n)
 156          {
 157   1        //function to transmit string of size n over TxD pin.
 158   1        for(i=0; i<n; i++) transmit_data(str[i]);
 159   1      }
 160          
 161          
 162          // =======================================================================================================
             -=
 163                            /* Previous Lab's Functions */
 164          // =======================================================================================================
             -=
 165          /**
 166           * FUNCTION_PURPOSE:interrupt
 167           * FUNCTION_INPUTS: void
 168           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
 169           */
 170          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
 171          {
 172   1        switch  ( SPSTA )         /* read and clear spi status register */
 173   1        {
 174   2          case 0x80:  
 175   2            serial_data=SPDAT;   /* read receive data */
 176   2                transmit_completed=1;/* set software flag */
C51 COMPILER V9.56.0.0   LABWORK                                                           09/19/2017 03:31:29 PAGE 4   

 177   2          break;
 178   2      
 179   2          case 0x10:
 180   2               /* put here for mode fault tasking */  
 181   2          break;
 182   2        
 183   2          case 0x40:
 184   2               /* put here for overrun tasking */ 
 185   2          break;
 186   2        }
 187   1      }
 188          
 189          char int_to_string(int val){
 190   1        val += 0x30;
 191   1        return (char)val;
 192   1      }
 193          
 194          /**
 195          
 196           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
 197           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 198           *                   P1.4(SSbar)
 199                               P1.6(SCK)
 200           */ 
 201          void SPI_Init()
 202          {
 203   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
 204   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
 205   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
 206   1        SPCON |= 0x10;                  // Master mode 
 207   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
 208   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
 209   1        IEN1 |= 0x04;                   // enable spi interrupt 
 210   1        EA=1;                           // enable interrupts 
 211   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 212   1      }
 213          
 214          void delay_ms(int delay)
 215          {
 216   1        int d=0;
 217   1        while(delay>0)
 218   1        {
 219   2          for(d=0;d<382;d++);
 220   2          delay--;
 221   2        }
 222   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    441    ----
   CONSTANT SIZE    =     76    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     28       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
