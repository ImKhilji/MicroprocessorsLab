A51 MACRO ASSEMBLER  QUESTION1                                                            08/21/2017 23:52:38 PAGE     1


MACRO ASSEMBLER A51 V8.2.5.0
OBJECT MODULE PLACED IN .\Objects\question1.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE question1.asm SET(SMALL) DEBUG PRINT(.\Listings\question1.lst) OBJECT(.
                      \Objects\question1.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ; This subroutine writes characters on the LCD

  00A0                 2     LCD_data equ P2    ;LCD Data port

  0080                 3     LCD_rs   equ P0.0  ;LCD Register Select

  0081                 4     LCD_rw   equ P0.1  ;LCD Read/Write

  0082                 5     LCD_en   equ P0.2  ;LCD Enable

                       6     

0000                   7     ORG 000H

0000 02014E            8     ljmp main

                       9     

0100                  10     ORG 100H

                      11             ;;Parameters:

                      12             ;;              50H -> N

                      13             ;;              51H -> Starting Pointer

                      14     

0100                  15     spaceOut:                               

0100 A950             16             mov r1,50h

0102 A851             17             mov r0,51h

0104                  18             loop_zero:

0104 7600             19                     mov @r0,#0

0106 08               20                     inc r0

0107 D9FB             21                     djnz r1, loop_zero

0109 22               22     ret

                      23     

                      24     

                      25     

                      26             ;;Parameters:

                      27             ;;              50H -> D

                      28             

010A                  29     delay_:                                         ;This routine takes input from 50H location

                      30             using 0

010A C0D0             31             push psw

010C 75D008           32             mov psw,#08H

                      33             using 1

010F E550             34             mov A,50H                               ;This is D

0111 75F00A           35             mov B,#10                               ;Divides D by 2 and multiplies by 20 to con
                             vert into seconds

0114 A4               36             mul AB                                  ;Now A has the total number of times delay 
                             must be called

0115 F8               37             mov r0,A                                ;Total number of iterations over 50ms store
                             d in A

0116                  38             delay1:

0116 7AC8             39                     mov R2,#200

0118                  40                     back1:

0118 79FF             41                             mov R1,#0FFH

011A D9FE             42                             back: djnz R1, back

011C DAFA             43                     djnz R2, back1

011E D8F6             44             djnz r0, delay1

0120 D0D0             45             pop psw

0122 22               46     ret

                      47             

                      48             

                      49             

                      50             ;;Parameters:

                      51             ;;              53H -> Nibble

                      52             ;;              r0  -> Write Location

                      53     

0123                  54     write_nibble:                           ;Nibble in 53h and write location in r0

A51 MACRO ASSEMBLER  QUESTION1                                                            08/21/2017 23:52:38 PAGE     2

0123 C3               55                     clr c

0124 940A             56                     subb A,#0ah

0126 4005             57                     jc digit

0128 2441             58                             add A,#41h

012A F6               59                             mov @r0,A

012B 8005             60                     sjmp comp

012D                  61                     digit:

012D E553             62                             mov A,53h

012F 2430             63                             add A,#30h

0131 F6               64                             mov @r0,A

0132 22               65                     comp: ret

                      66                     

                      67                     

                      68                     

                      69             ;;Parameters:

                      70             ;;              50H -> N

                      71             ;;              51H -> Read Pointer

                      72             ;;              52H -> Write Pointer

                      73     

0133                  74     bin2ascii:

0133 AA50             75             mov r2,50h                              ;N

0135 A951             76             mov r1,51h                              ;Read pointer

0137 A852             77             mov r0,52h                              ;Write pointer  

                      78             

0139                  79             binloop:

0139 E7               80                     mov A,@r1

013A 54F0             81                     anl A,#0F0H             ;higher nibble saved , rest all bits to 0

013C C4               82                     swap A

013D F553             83                     mov 53h,A

013F 3123             84                     acall write_nibble      ;53h as argument parameter

0141 08               85                     inc r0

                      86                     

0142 740F             87                     mov A,#0FH

0144 57               88                     anl A,@r1                       ;Lower order bits recovered

0145 F553             89                     mov 53h,A

0147 3123             90                     acall write_nibble

0149 08               91                     inc r0

014A 09               92                     inc r1

014B DAEC             93             djnz r2,binloop

014D 22               94     ret

                      95     

                      96     ;======================================

                      97     ;                       Main Function

                      98     ;======================================

                      99     

014E                 100     main:

014E 7581C7          101             mov SP,#0C7H

0151 755040          102             mov 50H,#64D                    ;ZeroOut the locations before displaying

0154 755180          103             mov 51H,#80H                    

0157 3100            104             acall spaceOut

                     105             

0159 7880            106             mov r0,#80H                             ;80H -> "ABPSW="

015B 7641            107             mov @r0,#41H

015D 08              108             inc r0

015E 7642            109             mov @r0,#42H

0160 08              110             inc r0

0161 7650            111             mov @r0,#50H

0163 08              112             inc r0

0164 7653            113             mov @r0,#53H

0166 08              114             inc r0

0167 7657            115             mov @r0,#57H

0169 08              116             inc r0

016A 763D            117             mov @r0,#3DH

                     118             

016C 7890            119             mov r0,#90H                             ;90H -> "R012="

016E 7652            120             mov @r0,#52H

A51 MACRO ASSEMBLER  QUESTION1                                                            08/21/2017 23:52:38 PAGE     3

0170 08              121             inc r0

0171 7630            122             mov @r0,#30H

0173 08              123             inc r0

0174 7631            124             mov @r0,#31H

0176 08              125             inc r0

0177 7632            126             mov @r0,#32H

0179 08              127             inc r0

017A 763D            128             mov @r0,#3DH

                     129             

017C 78A0            130             mov r0,#0A0H                    ;0A0H -> "R345="

017E 7652            131             mov @r0,#52H

0180 08              132             inc r0

0181 7633            133             mov @r0,#33H

0183 08              134             inc r0

0184 7634            135             mov @r0,#34H

0186 08              136             inc r0

0187 7635            137             mov @r0,#35H

0189 08              138             inc r0

018A 763D            139             mov @r0,#3DH

                     140             

018C 78B0            141             mov r0,#0B0H                    ;0B0H -> "R67SP"

018E 7652            142             mov @r0,#52H

0190 08              143             inc r0

0191 7636            144             mov @r0,#36H

0193 08              145             inc r0

0194 7637            146             mov @r0,#37H

0196 08              147             inc r0

0197 7653            148             mov @r0,#53H

0199 08              149             inc r0

019A 7650            150             mov @r0,#50H

019C 08              151             inc r0

019D 763D            152             mov @r0,#3DH

                     153     

                     154     ;======================================

                     155     ;       Test Data fed into the registers

                     156     ;======================================

019F 7800            157             mov r0,#00

01A1 790A            158             mov r1,#10

01A3 7A14            159             mov r2,#20

01A5 7B1E            160             mov r3,#30

01A7 7C28            161             mov r4,#40

01A9 7D32            162             mov r5,#50

01AB 7E3C            163             mov r6,#60

01AD 7F46            164             mov r7,#70

                     165             

                     166     ;==========================================

                     167     ;       Copying everything to an array (#70H)

                     168     ;==========================================

01AF 8870            169             mov 70H,r0

01B1 8971            170             mov 71H,r1

01B3 8A72            171             mov 72H,r2

01B5 8B73            172             mov 73H,r3

01B7 8C74            173             mov 74H,r4

01B9 8D75            174             mov 75H,r5

01BB 8E76            175             mov 76H,r6

01BD 8F77            176             mov 77H,r7

01BF 858178          177             mov 78H,sp

01C2 F579            178             mov 79H,A

01C4 85F07A          179             mov 7AH,B

01C7 85D07B          180             mov 7BH,psw

                     181             

01CA                 182             binascii:

01CA 755003          183                     mov 50H,#3                              ;R012

01CD 755170          184                     mov 51H,#70H

01D0 755295          185                     mov 52H,#95H

01D3 3133            186                     acall bin2ascii

A51 MACRO ASSEMBLER  QUESTION1                                                            08/21/2017 23:52:38 PAGE     4

                     187                     

01D5 755003          188                     mov 50H,#3                              ;R345

01D8 755173          189                     mov 51H,#73H

01DB 7552A5          190                     mov 52H,#0A5H

01DE 3133            191                     acall bin2ascii

                     192                     

01E0 755003          193                     mov 50H,#3                              ;R67SP

01E3 755176          194                     mov 51H,#76H

01E6 7552B6          195                     mov 52H,#0B6H

01E9 3133            196                     acall bin2ascii

                     197                     

01EB 755003          198                     mov 50H,#3                              ;ABPSW

01EE 755179          199                     mov 51H,#79H

01F1 755286          200                     mov 52H,#86H

01F4 3133            201                     acall bin2ascii

                     202             

01F6 020200          203             ljmp start

                     204             

                     205             

0200                 206     org 200h

0200                 207     start:

0200 75A000          208           mov P2,#00h

0203 759000          209               mov P1,#00h

                     210               

0206 51B1            211           acall delay                               ;initial delay for lcd power up

0208 51B1            212               acall delay

020A 514A            213               acall lcd_init                ;initialise LCD

020C 51B1            214               acall delay

020E 51B1            215               acall delay

0210 51B1            216               acall delay

                     217               

                     218               ;=====================================

                     219               ;                             LCD display

                     220               ;=====================================

0212 7480            221               mov   a,#80H                          ;Put cursor on first row,0 column

0214 5187            222               acall lcd_command                     ;send command to LCD

0216 51B1            223               acall delay

0218 7880            224               mov   r0,#80H                         ;Load DPTR with sring1 Addr

021A 51A7            225               acall lcd_sendstring_name     ;call text strings sending routine

021C 51B1            226               acall delay

                     227     

021E 74C0            228               mov a,#0C0H                           ;Put cursor on second row,0 column

0220 5187            229               acall lcd_command

0222 51B1            230               acall delay

0224 7890            231               mov   r0,#90H

0226 51A7            232               acall lcd_sendstring_name

                     233               

0228 75500A          234               mov 50H,#10D

022B 310A            235               acall delay_

                     236               

                     237               ;=====================================

                     238               ;                             Second LCD display

                     239               ;=====================================

022D 7480            240               mov   a,#80h                          ;Put cursor on first row,0 column

022F 5187            241               acall lcd_command                     ;send command to LCD

0231 51B1            242               acall delay

0233 78A0            243               mov   r0,#0A0H                        ;Load DPTR with sring1 Addr

0235 51A7            244               acall lcd_sendstring_name     ;call text strings sending routine

0237 51B1            245               acall delay

                     246     

0239 74C0            247               mov   a,#0C0h                         ;Put cursor on second row,0 column

023B 5187            248               acall lcd_command

023D 51B1            249               acall delay

023F 78B0            250               mov   r0,#0B0H

0241 51A7            251               acall lcd_sendstring_name

                     252               

A51 MACRO ASSEMBLER  QUESTION1                                                            08/21/2017 23:52:38 PAGE     5

0243 75500A          253               mov 50H,#10D

0246 310A            254               acall delay_

                     255               

0248 80FE            256     here: sjmp here                          

                     257     

                     258     ;------------------------LCD Initialisation routine----------------------------------------
                             ------------

024A                 259     lcd_init:

024A 75A038          260              mov   LCD_data,#38H    ;Function set: 2 Line, 8-bit, 5x7 dots

024D C280            261              clr   LCD_rs           ;Selected command register

024F C281            262              clr   LCD_rw           ;We are writing in instruction register

0251 D282            263              setb  LCD_en           ;Enable H->L

0253 51B1            264                      acall delay

0255 C282            265              clr   LCD_en

0257 51B1            266                  acall delay

                     267     

0259 75A00C          268              mov   LCD_data,#0CH  ;Display on, Curson off

025C C280            269              clr   LCD_rs         ;Selected instruction register

025E C281            270              clr   LCD_rw         ;We are writing in instruction register

0260 D282            271              setb  LCD_en         ;Enable H->L

0262 51B1            272                      acall delay

0264 C282            273              clr   LCD_en

                     274              

0266 51B1            275                      acall delay

0268 75A001          276              mov   LCD_data,#01H  ;Clear LCD

026B C280            277              clr   LCD_rs         ;Selected command register

026D C281            278              clr   LCD_rw         ;We are writing in instruction register

026F D282            279              setb  LCD_en         ;Enable H->L

0271 51B1            280                      acall delay

0273 C282            281              clr   LCD_en

                     282              

0275 51B1            283                      acall delay

                     284     

0277 75A006          285              mov   LCD_data,#06H  ;Entry mode, auto increment with no shift

027A C280            286              clr   LCD_rs         ;Selected command register

027C C281            287              clr   LCD_rw         ;We are writing in instruction register

027E D282            288              setb  LCD_en         ;Enable H->L

0280 51B1            289                      acall delay

0282 C282            290              clr   LCD_en

                     291     

0284 51B1            292                      acall delay

                     293              

0286 22              294              ret                  ;Return from routine

                     295     

                     296     ;-----------------------command sending routine-------------------------------------

0287                 297      lcd_command:

0287 F5A0            298              mov   LCD_data,A     ;Move the command to LCD port

0289 C280            299              clr   LCD_rs         ;Selected command register

028B C281            300              clr   LCD_rw         ;We are writing in instruction register

028D D282            301              setb  LCD_en         ;Enable H->L

028F 51B1            302                      acall delay

0291 C282            303              clr   LCD_en

0293 51B1            304                      acall delay    

0295 22              305              ret  

                     306                      

                     307     ;-----------------------data sending routine-------------------------------------          
                                       

0296                 308      lcd_senddata:

0296 F5A0            309              mov   LCD_data,A     ;Move the command to LCD port

0298 D280            310              setb  LCD_rs         ;Selected data register

029A C281            311              clr   LCD_rw         ;We are writing

029C D282            312              setb  LCD_en         ;Enable H->L

029E 51B1            313                      acall delay

02A0 C282            314              clr   LCD_en

02A2 51B1            315              acall delay

02A4 51B1            316                      acall delay

A51 MACRO ASSEMBLER  QUESTION1                                                            08/21/2017 23:52:38 PAGE     6

02A6 22              317              ret                  ;Return from busy routine

                     318                      

                     319     ;-----------------------text strings sending routine-------------------------------------

02A7                 320     lcd_sendstring_name:

02A7 E4              321              clr   a                 ;clear Accumulator for any previous data

02A8 E6              322              mov   a,@r0             ;load the first character in accumulator

02A9 6005            323              jz    exit2             ;go to exit if zero

02AB 5196            324              acall lcd_senddata      ;send first char

02AD 08              325              inc   r0                ;increment data pointer

02AE 80F7            326              sjmp  LCD_sendstring_name    ;jump back to send the next character

02B0                 327     exit2:

02B0 22              328              ret                     ;End of routine

                     329     

                     330     ;----------------------delay routine-----------------------------------------------------

02B1                 331     delay:   

                     332             using 1

02B1 C0D0            333                     push psw

02B3 75D008          334                     mov psw,#08H

                     335              

02B6 7801            336                     mov r0,#1

02B8 79FF            337     loop2:  mov r1,#255

02BA D9FE            338     loop1:  djnz r1, loop1

02BC D8FA            339                     djnz r0,loop2

                     340                      

02BE D0D0            341                     pop psw

02C0 22              342     ret

                     343     

                     344     end

A51 MACRO ASSEMBLER  QUESTION1                                                            08/21/2017 23:52:38 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E              T Y P E  V A L U E   ATTRIBUTES

B . . . . . . . . .  D ADDR   00F0H   A   
BACK. . . . . . . .  C ADDR   011AH   A   
BACK1 . . . . . . .  C ADDR   0118H   A   
BIN2ASCII . . . . .  C ADDR   0133H   A   
BINASCII. . . . . .  C ADDR   01CAH   A   
BINLOOP . . . . . .  C ADDR   0139H   A   
COMP. . . . . . . .  C ADDR   0132H   A   
DELAY . . . . . . .  C ADDR   02B1H   A   
DELAY1. . . . . . .  C ADDR   0116H   A   
DELAY_. . . . . . .  C ADDR   010AH   A   
DIGIT . . . . . . .  C ADDR   012DH   A   
EXIT2 . . . . . . .  C ADDR   02B0H   A   
HERE. . . . . . . .  C ADDR   0248H   A   
LCD_COMMAND . . . .  C ADDR   0287H   A   
LCD_DATA. . . . . .  D ADDR   00A0H   A   
LCD_EN. . . . . . .  B ADDR   0080H.2 A   
LCD_INIT. . . . . .  C ADDR   024AH   A   
LCD_RS. . . . . . .  B ADDR   0080H.0 A   
LCD_RW. . . . . . .  B ADDR   0080H.1 A   
LCD_SENDDATA. . . .  C ADDR   0296H   A   
LCD_SENDSTRING_NAME  C ADDR   02A7H   A   
LOOP1 . . . . . . .  C ADDR   02BAH   A   
LOOP2 . . . . . . .  C ADDR   02B8H   A   
LOOP_ZERO . . . . .  C ADDR   0104H   A   
MAIN. . . . . . . .  C ADDR   014EH   A   
P0. . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . .  D ADDR   00A0H   A   
PSW . . . . . . . .  D ADDR   00D0H   A   
SP. . . . . . . . .  D ADDR   0081H   A   
SPACEOUT. . . . . .  C ADDR   0100H   A   
START . . . . . . .  C ADDR   0200H   A   
WRITE_NIBBLE. . . .  C ADDR   0123H   A   


REGISTER BANK(S) USED: 0 1 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
