A51 MACRO ASSEMBLER  TIME_ON_LCD                                                          08/28/2017 05:56:38 PAGE     1


MACRO ASSEMBLER A51 V8.2.5.0
OBJECT MODULE PLACED IN .\Objects\time_on_lcd.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE time_on_lcd.asm SET(SMALL) DEBUG PRINT(.\Listings\time_on_lcd.lst) OBJE
                      CT(.\Objects\time_on_lcd.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;Displaying the current time on the LCD

  00A0                 2     LCD_data equ P2    ;LCD Data port

  0080                 3     LCD_rs   equ P0.0  ;LCD Register Select

  0081                 4     LCD_rw   equ P0.1  ;LCD Read/Write

  0082                 5     LCD_en   equ P0.2  ;LCD Enable

                       6     

                       7     ;Bank 0 -> Main program

                       8     ;Bank 1 -> function calls

                       9     ;Bank 2 -> Interrupts

                      10     

0000                  11     org 00h

0000 02011E           12     ljmp main

                      13     

000B                  14     org 0bh

000B 02028F           15     ljmp timer_int

                      16     

0100                  17     org 100h

0100                  18     zeroOut:        

                      19             using 1                                         ;Bank 1 for function calls

0100 C0D0             20                     push psw

0102 75D008           21                     mov psw,#08H

0105 A950             22             mov r1,50h                                      ;N

0107 A851             23             mov r0,51h                                      ;Starting Pointer

0109                  24             loop_zero:

0109 7600             25                     mov @r0,#0

010B 08               26                     inc r0

010C D9FB             27                     djnz r1, loop_zero

010E D0D0             28                     pop psw

0110 22               29     ret

                      30     

0111                  31     start_timer:

0111 791E             32             mov r1,#30

0113 758901           33             mov TMOD,#01H

0116 75A882           34             mov IE,#82H

0119 C28D             35             clr tf0

011B D28C             36             setb tr0                                        ;Starting the timer

011D 22               37     ret

                      38     

                      39     

011E                  40     main:

011E 7581C7           41             mov sp,#0C7H                            ;Safe siding the stack pointer

                      42             

0121 755010           43             mov 50H,#16                                     ;Initialising the array to zero

0124 755170           44             mov 51H,#70H

0127 3100             45             acall zeroOut

                      46             

0129 75723A           47             mov 72H,#':'

012C 75753A           48             mov 75H,#':'

                      49             

012F 757A12           50             mov 7Ah,#12H

0132 757B59           51             mov 7Bh,#59H

0135 757C45           52             mov 7Ch,#45H

                      53             

0138 75900F           54             mov P1,#0FH                                     ;First configure switches as input 
                             and LED’s as output

013B 315E             55             acall lcd_init                          ;initialise LCD

013D 31CE             56             acall delay

A51 MACRO ASSEMBLER  TIME_ON_LCD                                                          08/28/2017 05:56:38 PAGE     2

013F 31CE             57             acall delay

0141 31CE             58             acall delay

                      59     

0143 3111             60             acall start_timer                       ;Starts the timer

                      61     

0145                  62     loop_main:

                      63             

0145 7480             64             mov   a,#80h                            ;Put cursor on first row,6 column

0147 319B             65             acall lcd_command                       ;send command to LCD

0149 31CE             66             acall delay

014B 900300           67             mov   dptr,#my_string           ;Load DPTR with sring1 Addr

014E 31BB             68             acall lcd_sendstring            ;call text strings sending routine

0150 31CE             69             acall delay

                      70     

                      71                                                                     

0152 74C4             72             mov   a,#0C4H                           ;Put cursor on second row,4 column

0154 319B             73             acall lcd_command

0156 31CE             74             acall delay

0158 7870             75             mov   r0,#70H

015A 31C5             76             acall lcd_sendstring_name       

                      77             

015C 80E7             78             sjmp loop_main                           ;return to loop

                      79             

                      80     ;======================================

                      81     ;                       LCD subroutines

                      82     ;======================================

015E                  83     lcd_init:

015E 75A038           84              mov   LCD_data,#38H  ;Function set: 2 Line, 8-bit, 5x7 dots

0161 C280             85              clr   LCD_rs         ;Selected command register

0163 C281             86              clr   LCD_rw         ;We are writing in instruction register

0165 D282             87              setb  LCD_en         ;Enable H->L

0167 31CE             88                      acall delay

0169 C282             89              clr   LCD_en

016B 31CE             90                  acall delay

                      91     

016D 75A00C           92              mov   LCD_data,#0CH  ;Display on, Curson off

0170 C280             93              clr   LCD_rs         ;Selected instruction register

0172 C281             94              clr   LCD_rw         ;We are writing in instruction register

0174 D282             95              setb  LCD_en         ;Enable H->L

0176 31CE             96                      acall delay

0178 C282             97              clr   LCD_en

                      98              

017A 31CE             99                      acall delay

017C 75A001          100              mov   LCD_data,#01H  ;Clear LCD

017F C280            101              clr   LCD_rs         ;Selected command register

0181 C281            102              clr   LCD_rw         ;We are writing in instruction register

0183 D282            103              setb  LCD_en         ;Enable H->L

0185 31CE            104                      acall delay

0187 C282            105              clr   LCD_en

                     106              

0189 31CE            107                      acall delay

                     108     

018B 75A006          109              mov   LCD_data,#06H  ;Entry mode, auto increment with no shift

018E C280            110              clr   LCD_rs         ;Selected command register

0190 C281            111              clr   LCD_rw         ;We are writing in instruction register

0192 D282            112              setb  LCD_en         ;Enable H->L

0194 31CE            113                      acall delay

0196 C282            114              clr   LCD_en

                     115     

0198 31CE            116                      acall delay

                     117              

019A 22              118              ret                  ;Return from routine

                     119     

                     120     ;-----------------------command sending routine-------------------------------------

019B                 121      lcd_command:

019B F5A0            122              mov   LCD_data,A     ;Move the command to LCD port

A51 MACRO ASSEMBLER  TIME_ON_LCD                                                          08/28/2017 05:56:38 PAGE     3

019D C280            123              clr   LCD_rs         ;Selected command register

019F C281            124              clr   LCD_rw         ;We are writing in instruction register

01A1 D282            125              setb  LCD_en         ;Enable H->L

01A3 31CE            126                      acall delay

01A5 C282            127              clr   LCD_en

01A7 31CE            128                      acall delay

                     129         

01A9 22              130              ret  

                     131     ;-----------------------data sending routine-------------------------------------          
                                       

01AA                 132      lcd_senddata:

01AA F5A0            133              mov   LCD_data,A     ;Move the command to LCD port

01AC D280            134              setb  LCD_rs         ;Selected data register

01AE C281            135              clr   LCD_rw         ;We are writing

01B0 D282            136              setb  LCD_en         ;Enable H->L

01B2 31CE            137                      acall delay

01B4 C282            138              clr   LCD_en

01B6 31CE            139              acall delay

01B8 31CE            140                      acall delay

01BA 22              141              ret                  ;Return from busy routine

                     142     

                     143     ;-----------------------text strings sending routine-------------------------------------

01BB                 144     lcd_sendstring:

01BB E4              145              clr   a                  ;clear Accumulator for any previous data

01BC 93              146              movc  a,@a+dptr          ;load the first character in accumulator

01BD 6005            147              jz    exit               ;go to exit if zero

01BF 31AA            148              acall lcd_senddata       ;send first char

01C1 A3              149              inc   dptr               ;increment data pointer

01C2 80F7            150              sjmp  LCD_sendstring     ;jump back to send the next character

01C4                 151     exit:

01C4 22              152              ret                      ;End of routine

                     153                      

                     154     ;-----------------------text strings sending routine-------------------------------------

01C5                 155     lcd_sendstring_name:

01C5 E6              156              mov   a,@r0              ;load the first character in accumulator

01C6 6005            157              jz    exit2              ;go to exit if zero

01C8 31AA            158              acall lcd_senddata       ;send first char

01CA 08              159              inc   r0                 ;increment register

01CB 80F8            160              sjmp  LCD_sendstring_name    ;jump back to send the next character

01CD                 161     exit2:

01CD 22              162              ret                      ;End of routine

                     163     

                     164     ;----------------------delay routine-----------------------------------------------------

01CE                 165     delay:   

                     166             using 1

01CE C0D0            167                     push psw

01D0 75D008          168                     mov psw,#08H

01D3 7801            169              mov r0,#1

01D5 79FF            170     loop2:   mov r1,#255

01D7 D9FE            171     loop1:   djnz r1, loop1

01D9 D8FA            172                      djnz r0,loop2

01DB D0D0            173                      pop psw

01DD 22              174                      ret

                     175     

                     176     

                     177     ;=============================

                     178     ;               Interrupt

                     179     ;=============================

0200                 180     org 200h

0200                 181     write_nibble:                                   ;Lower nibble in 53h and write location in 
                             r0

0200 C3              182                     clr c

0201 940A            183                     subb A,#0ah

0203 4005            184                     jc digit

0205 2441            185                             add A,#41h

0207 F6              186                             mov @r0,A

A51 MACRO ASSEMBLER  TIME_ON_LCD                                                          08/28/2017 05:56:38 PAGE     4

0208 8005            187                     sjmp comp

020A                 188                     digit:

020A E553            189                             mov A,53h

020C 2430            190                             add A,#30h

020E F6              191                             mov @r0,A

020F 22              192                     comp: ret

                     193     

0210                 194     bin2ascii:

                     195             using 1

0210 C0D0            196                     push psw

0212 75D008          197                     mov psw,#08H

0215 AA50            198             mov r2,50h                                              ;N

0217 A951            199             mov r1,51h                                              ;Read pointer

0219 A852            200             mov r0,52h                                              ;Write pointer  

                     201             

021B                 202             binloop:

021B E7              203                     mov A,@r1

021C 54F0            204                     anl A,#0F0H                             ;higher nibble saved , rest all bit
                             s to 0

021E C4              205                     swap A

021F F553            206                     mov 53h,A

0221 5100            207                     acall write_nibble                      ;53 is reserved for its argument pa
                             rameter

0223 08              208                     inc r0

                     209                     

0224 740F            210                     mov A,#0FH

0226 57              211                     anl A,@r1                                       ;Lower order bits recovered

0227 F553            212                     mov 53h,A

0229 5100            213                     acall write_nibble

022B 08              214                     inc r0

022C 09              215                     inc r1

022D DAEC            216             djnz r2,binloop

022F D0D0            217             pop psw

0231 22              218     ret

                     219     

0232                 220     add_a_sec_min:                                          ;r0 has the address of the seconds 
                             or minutes byte

                     221                                                                             ;Returns if any car
                             ry through the carry bit

0232 E6              222             mov A,@r0

0233 540F            223             anl A,#0FH                                              ;Lower nibble

0235 B40911          224             cjne A,#09H,skip1

0238 E6              225             mov A,@r0

0239 54F0            226             anl A,#0F0H                                             ;Higher Nibble

023B B45005          227             cjne A,#50H,skip2

023E 7600            228             mov @r0,#00

0240 D3              229             setb c

0241 8008            230             sjmp return1

0243                 231             skip2:

0243 2410            232                     add A,#10H

0245 F6              233                     mov @r0,A

0246 C3              234                     clr c

0247 8002            235                     sjmp return1

0249                 236             skip1:

0249 06              237                     inc @r0

024A C3              238                     clr c

024B                 239             return1:

024B 22              240                     ret

                     241     

024C                 242     add_an_hh:

024C E6              243             mov A,@r0

024D B40904          244             cjne A,#09H,skip_9                              ;Check for 09H

0250 7610            245                     mov @r0,#10H

0252 8008            246                     sjmp term

0254                 247             skip_9:

0254 B41204          248                     cjne A,#12H,skip_12

A51 MACRO ASSEMBLER  TIME_ON_LCD                                                          08/28/2017 05:56:38 PAGE     5

0257 7601            249                     mov @r0,#01H

0259 8001            250                     sjmp term

025B                 251             skip_12:

025B 06              252                     inc @r0

025C                 253                     term:

025C 22              254             ret

                     255     

025D                 256     update_time:                                            ;70H,71H -> hh   73H,74H -> mm   76
                             H,77H -> ss

                     257                                                                             ;7AH,7BH,7CH -> one
                              combined bytes stored

                     258                                                                             

025D 787C            259             mov r0,#7CH                                             ;Add a second

025F 5132            260             acall add_a_sec_min

0261 500A            261             jnc bin_ascii

0263 787B            262             mov r0,#7BH                                             ;Add a minute

0265 5132            263             acall add_a_sec_min

0267 5004            264             jnc bin_ascii

0269 787A            265             mov r0,#7AH                                             ;Add an hour

026B 514C            266             acall add_an_hh

                     267             

026D                 268             bin_ascii:

026D 755001          269                     mov 50H,#1

0270 75517C          270                     mov 51H,#7CH

0273 755276          271                     mov 52H,#76H

0276 5110            272                     acall bin2ascii

                     273                     

0278 755001          274                     mov 50H,#1

027B 75517B          275                     mov 51H,#7BH

027E 755273          276                     mov 52H,#73H

0281 5110            277                     acall bin2ascii

                     278                     

0283 755001          279                     mov 50H,#1

0286 75517A          280                     mov 51H,#7AH

0289 755270          281                     mov 52H,#70H

028C 5110            282                     acall bin2ascii

028E 22              283             ret

                     284     

028F                 285     timer_int:

028F D904            286             djnz r1,skip_update

0291 515D            287             acall update_time

0293 791E            288             mov r1,#30

0295                 289             skip_update:

0295 32              290                     reti

                     291     

0300                 292     org 300h

0300                 293             my_string:

0300 20202020        294                     DB '      Time        ',00H

0304 20205469                
0308 6D652020                
030C 20202020                
0310 202000                  
                     295             

                     296     end

A51 MACRO ASSEMBLER  TIME_ON_LCD                                                          08/28/2017 05:56:38 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E              T Y P E  V A L U E   ATTRIBUTES

ADD_AN_HH . . . . .  C ADDR   024CH   A   
ADD_A_SEC_MIN . . .  C ADDR   0232H   A   
BIN2ASCII . . . . .  C ADDR   0210H   A   
BINLOOP . . . . . .  C ADDR   021BH   A   
BIN_ASCII . . . . .  C ADDR   026DH   A   
COMP. . . . . . . .  C ADDR   020FH   A   
DELAY . . . . . . .  C ADDR   01CEH   A   
DIGIT . . . . . . .  C ADDR   020AH   A   
EXIT. . . . . . . .  C ADDR   01C4H   A   
EXIT2 . . . . . . .  C ADDR   01CDH   A   
IE. . . . . . . . .  D ADDR   00A8H   A   
LCD_COMMAND . . . .  C ADDR   019BH   A   
LCD_DATA. . . . . .  D ADDR   00A0H   A   
LCD_EN. . . . . . .  B ADDR   0080H.2 A   
LCD_INIT. . . . . .  C ADDR   015EH   A   
LCD_RS. . . . . . .  B ADDR   0080H.0 A   
LCD_RW. . . . . . .  B ADDR   0080H.1 A   
LCD_SENDDATA. . . .  C ADDR   01AAH   A   
LCD_SENDSTRING. . .  C ADDR   01BBH   A   
LCD_SENDSTRING_NAME  C ADDR   01C5H   A   
LOOP1 . . . . . . .  C ADDR   01D7H   A   
LOOP2 . . . . . . .  C ADDR   01D5H   A   
LOOP_MAIN . . . . .  C ADDR   0145H   A   
LOOP_ZERO . . . . .  C ADDR   0109H   A   
MAIN. . . . . . . .  C ADDR   011EH   A   
MY_STRING . . . . .  C ADDR   0300H   A   
P0. . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . .  D ADDR   00A0H   A   
PSW . . . . . . . .  D ADDR   00D0H   A   
RETURN1 . . . . . .  C ADDR   024BH   A   
SKIP1 . . . . . . .  C ADDR   0249H   A   
SKIP2 . . . . . . .  C ADDR   0243H   A   
SKIP_12 . . . . . .  C ADDR   025BH   A   
SKIP_9. . . . . . .  C ADDR   0254H   A   
SKIP_UPDATE . . . .  C ADDR   0295H   A   
SP. . . . . . . . .  D ADDR   0081H   A   
START_TIMER . . . .  C ADDR   0111H   A   
TERM. . . . . . . .  C ADDR   025CH   A   
TF0 . . . . . . . .  B ADDR   0088H.5 A   
TIMER_INT . . . . .  C ADDR   028FH   A   
TMOD. . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . .  B ADDR   0088H.4 A   
UPDATE_TIME . . . .  C ADDR   025DH   A   
WRITE_NIBBLE. . . .  C ADDR   0200H   A   
ZEROOUT . . . . . .  C ADDR   0100H   A   


REGISTER BANK(S) USED: 0 1 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
